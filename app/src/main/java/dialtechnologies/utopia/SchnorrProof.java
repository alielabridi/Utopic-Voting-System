package dialtechnologies.utopia;

import com.fasterxml.jackson.annotation.JsonProperty;

import java.math.BigInteger;
import java.util.Random;

/**
 * Created by Ali on 6/20/2017.
 */
public class SchnorrProof {
    // A SchnorrProof is the proof that a Trustee knows the private key share
    // corresponding to Trustee.DecryptionFactors. The Commitment in this case is
    // only a single integer rather than a two-part commitment like in ZKProof.

    // Challenge is the value sent by the Verifier to the Prover.
    @JsonProperty("challenge")
    BigInteger challenge;

    // Commitment is a commitment to a random value used in the proof. It
    // is sent from the Prover to the Verifier.
    @JsonProperty("commitment")
    BigInteger commitment;

    // Response is the response to the Challenge. It is sent from the
    // Prover to the Verifier.
    @JsonProperty("response")
    BigInteger response;

    public SchnorrProof(BigInteger challenge, BigInteger commitment, BigInteger response) {
        this.challenge = challenge;
        this.commitment = commitment;
        this.response = response;
    }
    // NewSchnorrProof proves knowledge of a secret exponent in a cyclic group defined
    // by an ElGamal public key.
    public SchnorrProof NewSchnorrProof(BigInteger secret, Key publicKey){
        BigInteger w = BigInteger.valueOf(new Random().nextInt(publicKey.q.intValue()));
        // The commitment is g^w, and the challenge for the NIZKPOK is
        // generated by sha1(string(g^w)).
        BigInteger com = publicKey.g.modPow(w, publicKey.p);
        byte[] hash = org.apache.commons.codec.digest.DigestUtils.sha1(com.toString().getBytes());
        BigInteger chall = new BigInteger(hash);
        BigInteger resp = secret.multiply(chall);
        resp = resp.mod(publicKey.q);
        resp = resp.add(w);
        resp = resp.mod(publicKey.q);
        return new SchnorrProof(com, chall, resp);
    }

    @Override
    public String toString() {
        return "{"
                + "\"challenge\": " + challenge
                + ", \"commitment\": " + commitment
                + ", \"response\": " + response
                + "}";
    }
}
